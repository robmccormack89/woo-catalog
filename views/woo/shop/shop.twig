{% import "_snippets.twig" as snippets %}
{% extends 'archive.twig' %}

{% block styles %}
  {{ parent() }}
{% endblock %}

{% block main %}
  <div id="IndexArchive" class="index-archive shop-archive theme-archive" data-template="shop.twig">

    {% block archive_header %}
      {% include '_shop-header.twig' %}
    {% endblock %}

    {% block breads %}
      <div class="uk-container uk-padding-small">
        {% include '_breads.twig' %}
      </div>
    {% endblock %}

    {% block archive_content %}
      <div class="uk-container uk-section uk-section-small uk-padding-remove-top">

        {% do action('woocommerce_before_main_content') %}

        {% block shop_filters %}
          {% if configs.shop_filters %}
            <section class="shop-filters uk-margin-small-bottom">
              {% include '_shop-filters-form.twig' %}
            </section>
          {% endif %}
        {% endblock %}

        {% block loader_shop_loop_grid %}
          {% if configs.shop_filters %}
            <div id="DemoProductsGrid" class="uk-hidden uk-margin-medium-top">
              {% include '_shop-demo-products.twig' %}
            </div>
          {% endif %}
        {% endblock %}

        {% block shop_loop %}
          <section id="TheLoopContainer" class="uk-position-relative uk-margin-medium-top">
            <div id="TheLoop" class="products-loop uk-position-relative">
              {% if archive.posts is not empty %}

                {% block shop_loop_grid %}
                  <ul id="ProductsGrid" class="archive-posts filters-container products {{ grid_classes }} uk-grid uk-grid-small" uk-grid="masonry: true">
                    {% for post in archive.posts %}
                      <li class="product-item">
                        {% include tease_template %}
                      </li>
                    {% endfor %}
                  </ul>
                {% endblock %}

                {% block shop_pagination %}
                  {% if (archive.posts.pagination.next or archive.posts.pagination.prev) %}
                    <footer>
                      {% set _posts = archive.posts %}
                      {% include '_pagination.twig' with {pagination: _posts.pagination({show_all: false, mid_size: 3, end_size: 2}), container_class: ''} %}
                    </footer>
                  {% endif %}
                {% endblock %}

              {% else %}
                <div id="ProductsGrid">
                  {{ snippets.no_products_found_text()|e('esc_html') }}
                </div>
              {% endif %}
            </div>
          </section>
        {% endblock %}

        {% block archive_footer %}
        {% endblock %}

        {% do action('woocommerce_after_shop_loop') %}

        {% do action('woocommerce_after_main_content') %}

      </div>
    {% endblock %}

  </div>
{% endblock %}

{% block scripts %}
  {{ parent() }}

  <script type='text/javascript'>

    // get the HTML stuff as vars
    // generally, we will check to see if the HTML elements exist before triggering functions & events on them below
    form = document.querySelector('#FiltersForm');
    var themePagination = document.getElementById("themePagination");
    var adv_reset = document.getElementById("adv_reset");
    var product_cat_group = document.getElementById("product_cat_group");
    var product_cat_sub = document.getElementById("product_cat_sub");
    var product_range_group = document.getElementById("product_range_group");
    var product_range_sub = document.getElementById("product_range_sub");
    var filterBtns = document.querySelectorAll('.filter-btn');

    {% if configs.inf_pagination %}
      // pagination on load (window)
      if(themePagination){
        window.addEventListener('load', (event) => {
          shopPagination();
        });
      }
    {% endif %}

    {% if configs.shop_filters %}
      // THIS CODE MAKES THE FILTERS' PARENT DROPS PRODUCE CHILDREN BOTH WHEN U CLICK THEM AND ON PAGE LOAD
      // FOR THE PAGE LOADS, THIS CODE CHECKS TO SEE IF THE INITIAL CHECKED PARENT ACTUALLY SHOULD HAVE CHILDREN BEFORE TRYING TO PRODUCE THEM
      // for each filter group (parent filter dropdowns), we need to check them to see if any of their checkboxes have children
      // we then loop thru the children to add click events to each of them
      // we also add listener to window load depending on whether the .has-children checkboxes contains a checked item
      // we must do this for every parent group that will require a sub group e.g (product_cat & pa_pange)
    	if(product_cat_group){
        var catsChildren = product_cat_group.querySelectorAll(".has-children"); // get any .has-children items from the parent group
        if(catsChildren.length > 0){ // if .has-children elements exist

          // loop thru & add a 'click' event listener to each item
          // we will trigger our SubDrops func on each click
          catsChildren.forEach(item => {
            item.addEventListener('click', function(){
              getSubDropsFromParentSelection(event, '{{ fn('get_query_var', 'product_cat') }}')
            }, false)
          });

          // if the .has-children elements contain a checked item
          // we will trigger our SubDrops func on the window load
          // we need to trigger it on page init anyways, but we need to be sure...
          // the .has-children items contain at least one checked item...
          // otherwise the SubDrops func will be triggered even when the checked item is not actually a parent
          if(ifArrayContainsCheckedItem(catsChildren)){
            window.addEventListener("load", function(){
              getSubDropsFromParentSelection(event, '{{ fn('get_query_var', 'product_cat') }}')
            }, false);
          }

        }
    	};
    	if(product_range_group){
        var rangeChildren = product_range_group.querySelectorAll(".has-children");
        if(rangeChildren.length > 0){
          rangeChildren.forEach(item => {
            item.addEventListener('click', function(){
              getSubDropsFromParentSelection(event, '{{ fn('get_query_var', 'pa_range') }}', '/wp-json/get_subranges', 'product_range_group', 'product_subrange_group', 'product_range_sub')
            }, false)
          });
          if(ifArrayContainsCheckedItem(rangeChildren)){
            window.addEventListener("load", function(){
              getSubDropsFromParentSelection(event, '{{ fn('get_query_var', 'pa_range') }}', '/wp-json/get_subranges', 'product_range_group', 'product_subrange_group', 'product_range_sub')
            }, false);
          }
        }
    	};

      // this code creates custom disabled checkboxes from the '.prevent-unclick' selector
      // this must be done on window load, and after jingo events (getSubDropsFromParentSelection)
      // custom disabled checkboxes wont be clickable, but will still contribute to the form submission
      window.addEventListener('load', (event) => {
        const windowChkdChks = document.querySelectorAll(".prevent-unclick");
        windowChkdChks.forEach(item => {
          item.addEventListener('click', function(){
            event.preventDefault();
          }, false)
        });
      });
      product_cat_sub.addEventListener('jingo', (e) => {
        const subCatChkdChks = document.querySelectorAll(".prevent-unclick");
        subCatChkdChks.forEach(item => {
          item.addEventListener('click', function(){
            event.preventDefault();
          }, false)
        });
      }, false);
      product_range_sub.addEventListener('jingo', (e) => {
        const subRangeChkdChks = document.querySelectorAll(".prevent-unclick");
        subRangeChkdChks.forEach(item => {
          item.addEventListener('click', function(){
            event.preventDefault();
          }, false)
        });
      }, false);

      // THIS CODE TRIGGERS THE TOGGLE'ABLE DROP AREAS FUNCTIONALITY, BUT ONLY ON THE .filter-btn ELEMENTS
      if(filterBtns.length > 0){

        // may need to tweak this function; to work with things like the canel button etc
        toggleDropsAndAreas('.filter-btn', 'drop_target', 'theme-show', '.filter-area');

        // we want to add a class to the relevant filter-btn when a drop area is active/showing. this is so we can style the button / icon when open/closed

      }

      // form: custom submission & clear/reset functions
    	if(form){

        // CUSTOM FORM SUBMIT USING FETCH: on form submission
        form.addEventListener('submit', function() {

          // prevent default submission of form
          event.preventDefault();

          // then do custom submission
          filtersFormSubmitCustom(event, form);

        })

        // after form's succesful submission & replacing of content
        form.addEventListener('filtersFormSubmissionSuccess', function() {

          wooGlobalStyles(); //  redo the woo global styles
      		reEnableDisabledCheckboxes('FiltersFormDropArea'); // re-Enable the Disabled Checkboxes

          {% if configs.inf_pagination %}
            if(document.getElementById("themePagination")) shopPagination();
          {% endif %}

        })

        // CLEAR & RESET: on form reset clicks
        form.addEventListener("reset", function(){
          setTimeout(function() {

            // re-hide the drop areas
            removeClassFromElements('.filter-area', 'theme-show')
            removeClassFromElements('.filter-btn', 'theme-active')

            // and also hide the filter subs dropdowns
            addClassToElements('#product_cat_sub', 'uk-hidden')
            addClassToElements('#product_range_sub', 'uk-hidden')

            // then, do a custom form submission (this SHOULD reset the products to the page's default args - doublecheck)
            filtersFormSubmitCustom(event, form);

            // then redo the Parent -> Child filter drops (cat and range)
            if(product_cat_group){
              var catsChildren = product_cat_group.querySelectorAll(".has-children");
              if(catsChildren.length > 0){
                if(ifArrayContainsCheckedItem(catsChildren)){
                  getSubDropsFromParentSelection(event, '{{ fn('get_query_var', 'product_cat') }}')
                }

              }
          	};
          	if(product_range_group){
              var rangeChildren = product_range_group.querySelectorAll(".has-children");
              if(rangeChildren.length > 0){
                if(ifArrayContainsCheckedItem(rangeChildren)){
                  getSubDropsFromParentSelection(event, '{{ fn('get_query_var', 'pa_range') }}', '/wp-json/get_subranges', 'product_range_group', 'product_subrange_group', 'product_range_sub')
                }
              }
          	};

          });
        }, true);

    	};
    {% endif %}

  </script>

  {# end() #}
{% endblock %}
